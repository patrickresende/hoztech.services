from django.core.management.base import BaseCommand
from django.conf import settings
import os

class Command(BaseCommand):
    help = 'Testa a detec√ß√£o de navegadores e configura√ß√µes CSP espec√≠ficas'

    def handle(self, *args, **options):
        self.stdout.write('üîç Testando detec√ß√£o de navegadores e CSP...')
        
        # Verificar configura√ß√µes CSP
        self.stdout.write('\nüìä Configura√ß√µes CSP Atuais:')
        
        if hasattr(settings, 'CSP_SCRIPT_SRC'):
            self.stdout.write(f'CSP_SCRIPT_SRC: {settings.CSP_SCRIPT_SRC}')
            if "'unsafe-eval'" in settings.CSP_SCRIPT_SRC:
                self.stdout.write('‚ö†Ô∏è  AVISO: unsafe-eval detectado')
            else:
                self.stdout.write('‚úÖ unsafe-eval n√£o encontrado')
        
        if hasattr(settings, 'CSP_STYLE_SRC'):
            self.stdout.write(f'CSP_STYLE_SRC: {settings.CSP_STYLE_SRC}')
        
        if hasattr(settings, 'CSP_FONT_SRC'):
            self.stdout.write(f'CSP_FONT_SRC: {settings.CSP_FONT_SRC}')
        
        # Verificar middleware CSP
        self.stdout.write('\nüîß Middleware CSP:')
        if 'csp.middleware.CSPMiddleware' in settings.MIDDLEWARE:
            self.stdout.write('‚úÖ CSP Middleware ativo')
        else:
            self.stdout.write('‚ùå CSP Middleware n√£o encontrado')
        
        # Verificar ambiente
        self.stdout.write('\nüåç Ambiente:')
        self.stdout.write(f'ENVIRONMENT: {getattr(settings, "ENVIRONMENT", "N/A")}')
        self.stdout.write(f'DEBUG: {settings.DEBUG}')
        
        # Verificar arquivos de cookie consent
        self.stdout.write('\nüç™ Verifica√ß√£o de Cookie Consent:')
        cookie_files = [
            'core/templates/cookie_modals.html',
            'core/static/core/js/core_cookie_manager.js',
            'core/static/core/css/cookie_modals.css'
        ]
        
        for file_path in cookie_files:
            full_path = os.path.join(settings.BASE_DIR, file_path)
            if os.path.exists(full_path):
                self.stdout.write(f'‚úÖ {file_path}')
            else:
                self.stdout.write(f'‚ùå {file_path}')
        
        # Simular configura√ß√µes para diferentes navegadores
        self.stdout.write('\nüåê Configura√ß√µes por Navegador:')
        
        browser_configs = {
            'Brave': {
                'disableConsent': False,
                'cspRelaxed': True,
                'autoAccept': False,
                'showDebugInfo': True
            },
            'Firefox': {
                'disableConsent': False,
                'cspRelaxed': False,
                'autoAccept': False,
                'showDebugInfo': False
            },
            'Chrome': {
                'disableConsent': False,
                'cspRelaxed': False,
                'autoAccept': False,
                'showDebugInfo': False
            },
            'Safari': {
                'disableConsent': False,
                'cspRelaxed': False,
                'autoAccept': False,
                'showDebugInfo': False
            },
            'Edge': {
                'disableConsent': False,
                'cspRelaxed': False,
                'autoAccept': False,
                'showDebugInfo': False
            }
        }
        
        for browser, config in browser_configs.items():
            status = '‚úÖ' if not config['disableConsent'] else '‚ùå'
            csp_status = 'üõ°Ô∏è' if config['cspRelaxed'] else 'üîí'
            self.stdout.write(f'{status} {browser}: Consentimento {"Desabilitado" if config["disableConsent"] else "Habilitado"} | CSP {csp_status}')
        
        # Recomenda√ß√µes espec√≠ficas para Brave
        self.stdout.write('\nüí° Recomenda√ß√µes para Brave:')
        self.stdout.write('1. ‚úÖ Detec√ß√£o de navegador implementada')
        self.stdout.write('2. ‚úÖ CSP relaxado para Brave')
        self.stdout.write('3. ‚úÖ Debug info habilitado')
        self.stdout.write('4. ‚úÖ SameSite=Lax para cookies')
        self.stdout.write('5. ‚úÖ Event listeners em vez de onclick')
        
        # Verificar se h√° op√ß√£o de desabilitar consentimento
        self.stdout.write('\n‚öôÔ∏è  Op√ß√µes de Configura√ß√£o:')
        self.stdout.write('Para desabilitar cookie consent no Brave:')
        self.stdout.write('Alterar "disableConsent: false" para "disableConsent: true"')
        self.stdout.write('no arquivo cookie_modals.html, linha ~200')
        
        # Verificar compatibilidade
        self.stdout.write('\nüîß Compatibilidade:')
        self.stdout.write('‚úÖ Detec√ß√£o de Brave implementada')
        self.stdout.write('‚úÖ CSP configurado para navegadores restritivos')
        self.stdout.write('‚úÖ Cookies configurados com SameSite apropriado')
        self.stdout.write('‚úÖ Event listeners nativos')
        self.stdout.write('‚úÖ Debug info para troubleshooting')
        
        self.stdout.write('\n‚úÖ Teste de detec√ß√£o de navegadores conclu√≠do!') 