from django.core.management.base import BaseCommand
from django.conf import settings
import os

class Command(BaseCommand):
    help = 'Testa a compatibilidade CSP com navegadores restritivos como Brave'

    def handle(self, *args, **options):
        self.stdout.write('üîç Testando compatibilidade CSP...')
        
        # Verificar configura√ß√µes CSP
        self.stdout.write('\nüìä Configura√ß√µes CSP:')
        
        if hasattr(settings, 'CSP_SCRIPT_SRC'):
            self.stdout.write(f'CSP_SCRIPT_SRC: {settings.CSP_SCRIPT_SRC}')
            if "'unsafe-eval'" in settings.CSP_SCRIPT_SRC:
                self.stdout.write('‚ö†Ô∏è  AVISO: unsafe-eval detectado - pode causar problemas no Brave')
            else:
                self.stdout.write('‚úÖ unsafe-eval n√£o encontrado - compat√≠vel com Brave')
        
        if hasattr(settings, 'CSP_STYLE_SRC'):
            self.stdout.write(f'CSP_STYLE_SRC: {settings.CSP_STYLE_SRC}')
        
        if hasattr(settings, 'CSP_FONT_SRC'):
            self.stdout.write(f'CSP_FONT_SRC: {settings.CSP_FONT_SRC}')
        
        # Verificar middleware CSP
        self.stdout.write('\nüîß Middleware CSP:')
        if 'csp.middleware.CSPMiddleware' in settings.MIDDLEWARE:
            self.stdout.write('‚úÖ CSP Middleware ativo')
        else:
            self.stdout.write('‚ùå CSP Middleware n√£o encontrado')
        
        # Verificar ambiente
        self.stdout.write('\nüåç Ambiente:')
        self.stdout.write(f'ENVIRONMENT: {getattr(settings, "ENVIRONMENT", "N/A")}')
        self.stdout.write(f'DEBUG: {settings.DEBUG}')
        
        # Verificar configura√ß√µes de seguran√ßa
        self.stdout.write('\nüõ°Ô∏è  Configura√ß√µes de Seguran√ßa:')
        security_settings = [
            'SECURE_SSL_REDIRECT',
            'SECURE_BROWSER_XSS_FILTER',
            'SECURE_CONTENT_TYPE_NOSNIFF',
            'SESSION_COOKIE_SECURE',
            'CSRF_COOKIE_SECURE',
            'SECURE_HSTS_SECONDS',
            'SECURE_HSTS_INCLUDE_SUBDOMAINS',
            'SECURE_HSTS_PRELOAD'
        ]
        
        for setting in security_settings:
            value = getattr(settings, setting, 'N/A')
            self.stdout.write(f'{setting}: {value}')
        
        # Recomenda√ß√µes
        self.stdout.write('\nüí° Recomenda√ß√µes para compatibilidade com Brave:')
        self.stdout.write('1. ‚úÖ Remover unsafe-eval do CSP_SCRIPT_SRC')
        self.stdout.write('2. ‚úÖ Usar event listeners em vez de onclick inline')
        self.stdout.write('3. ‚úÖ Configurar SameSite=Lax para cookies')
        self.stdout.write('4. ‚úÖ Usar HTTPS em produ√ß√£o')
        self.stdout.write('5. ‚úÖ Implementar headers de seguran√ßa adequados')
        
        # Verificar arquivos est√°ticos
        self.stdout.write('\nüìÅ Verifica√ß√£o de Arquivos Est√°ticos:')
        static_files = [
            'core/static/core/js/core_cookie_manager.js',
            'core/static/core/js/promo_manager.js',
            'core/static/core/css/cookie_modals.css'
        ]
        
        for file_path in static_files:
            full_path = os.path.join(settings.BASE_DIR, file_path)
            if os.path.exists(full_path):
                self.stdout.write(f'‚úÖ {file_path}')
            else:
                self.stdout.write(f'‚ùå {file_path}')
        
        self.stdout.write('\n‚úÖ Teste de compatibilidade CSP conclu√≠do!') 