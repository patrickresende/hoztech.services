from django.core.management.base import BaseCommand
from django.test import Client
from django.contrib.auth.models import User
from django.conf import settings
from django.urls import reverse
from django.http import HttpRequest
from core.models import Session, AnalyticsExport, SEOMetrics, Cookie, PageView
import os
import sys

class Command(BaseCommand):
    help = 'Teste espec√≠fico para debug de produ√ß√£o - Verifica configura√ß√µes cr√≠ticas'

    def handle(self, *args, **options):
        self.stdout.write('üîç Teste de Debug de Produ√ß√£o - Verifica√ß√£o de Configura√ß√µes Cr√≠ticas')
        
        # 1. Verificar configura√ß√µes de ambiente
        self.stdout.write('\nüìã Verificando Configura√ß√µes de Ambiente:')
        self.stdout.write(f'ENVIRONMENT: {getattr(settings, "ENVIRONMENT", "N/A")}')
        self.stdout.write(f'DEBUG: {settings.DEBUG}')
        self.stdout.write(f'ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}')
        self.stdout.write(f'CSRF_TRUSTED_ORIGINS: {settings.CSRF_TRUSTED_ORIGINS}')
        
        # 2. Verificar configura√ß√µes de banco de dados
        self.stdout.write('\nüóÑÔ∏è Verificando Configura√ß√µes de Banco de Dados:')
        db_engine = settings.DATABASES['default']['ENGINE']
        self.stdout.write(f'Database Engine: {db_engine}')
        
        if 'postgresql' in db_engine:
            self.stdout.write('‚úÖ Usando PostgreSQL (produ√ß√£o)')
        elif 'sqlite' in db_engine:
            self.stdout.write('‚úÖ Usando SQLite (desenvolvimento)')
        else:
            self.stdout.write('‚ö†Ô∏è Engine de banco desconhecido')
        
        # 3. Verificar configura√ß√µes de arquivos est√°ticos
        self.stdout.write('\nüìÅ Verificando Configura√ß√µes de Arquivos Est√°ticos:')
        self.stdout.write(f'STATIC_URL: {settings.STATIC_URL}')
        self.stdout.write(f'STATIC_ROOT: {settings.STATIC_ROOT}')
        self.stdout.write(f'STATICFILES_STORAGE: {settings.STATICFILES_STORAGE}')
        
        # 4. Verificar configura√ß√µes de seguran√ßa
        self.stdout.write('\nüîí Verificando Configura√ß√µes de Seguran√ßa:')
        self.stdout.write(f'SECURE_SSL_REDIRECT: {getattr(settings, "SECURE_SSL_REDIRECT", "N/A")}')
        self.stdout.write(f'SESSION_COOKIE_SECURE: {getattr(settings, "SESSION_COOKIE_SECURE", "N/A")}')
        self.stdout.write(f'CSRF_COOKIE_SECURE: {getattr(settings, "CSRF_COOKIE_SECURE", "N/A")}')
        
        # 5. Verificar middleware
        self.stdout.write('\n‚öôÔ∏è Verificando Middleware:')
        for middleware in settings.MIDDLEWARE:
            self.stdout.write(f'  - {middleware}')
        
        # 6. Testar conex√£o com banco de dados
        self.stdout.write('\nüîó Testando Conex√£o com Banco de Dados:')
        try:
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                self.stdout.write('‚úÖ Conex√£o com banco de dados OK')
        except Exception as e:
            self.stdout.write(f'‚ùå Erro na conex√£o com banco: {e}')
        
        # 7. Verificar dados no banco
        self.stdout.write('\nüìä Verificando Dados no Banco:')
        try:
            session_count = Session.objects.count()
            export_count = AnalyticsExport.objects.count()
            seo_count = SEOMetrics.objects.count()
            cookie_count = Cookie.objects.count()
            pageview_count = PageView.objects.count()
            
            self.stdout.write(f'Sess√µes: {session_count}')
            self.stdout.write(f'Exports: {export_count}')
            self.stdout.write(f'SEO Metrics: {seo_count}')
            self.stdout.write(f'Cookies: {cookie_count}')
            self.stdout.write(f'Page Views: {pageview_count}')
        except Exception as e:
            self.stdout.write(f'‚ùå Erro ao consultar dados: {e}')
        
        # 8. Criar usu√°rio de teste
        self.stdout.write('\nüë§ Criando usu√°rio de teste...')
        try:
            user, created = User.objects.get_or_create(
                username='admin_test',
                defaults={
                    'email': 'test@example.com',
                    'is_staff': True,
                    'is_superuser': True
                }
            )
            if created:
                user.set_password('admin123')
                user.save()
                self.stdout.write('‚úÖ Usu√°rio de teste criado')
            else:
                self.stdout.write('‚úÖ Usu√°rio de teste j√° existe')
        except Exception as e:
            self.stdout.write(f'‚ùå Erro ao criar usu√°rio: {e}')
            return
        
        # 9. Testar login
        self.stdout.write('\nüîê Testando login...')
        client = Client()
        login_success = client.login(username='admin_test', password='admin123')
        if login_success:
            self.stdout.write('‚úÖ Login realizado com sucesso')
        else:
            self.stdout.write('‚ùå Falha no login')
            return
        
        # 10. Testar URLs cr√≠ticas
        self.stdout.write('\nüîó Testando URLs Cr√≠ticas:')
        
        # URLs do admin padr√£o
        admin_urls = [
            '/admin/',
            '/admin/core/session/',
            '/admin/core/analyticsexport/',
            '/admin/core/seometrics/',
            '/admin/core/cookie/',
            '/admin/core/pageview/',
        ]
        
        for url in admin_urls:
            try:
                response = client.get(url)
                status = response.status_code
                if status == 200:
                    self.stdout.write(f'‚úÖ {url} - Status: {status}')
                elif status == 302:
                    self.stdout.write(f'‚ö†Ô∏è {url} - Status: {status} (redirect)')
                else:
                    self.stdout.write(f'‚ùå {url} - Status: {status}')
            except Exception as e:
                self.stdout.write(f'‚ùå {url} - Erro: {e}')
        
        # URLs do admin customizado
        custom_admin_urls = [
            '/core_admin/',
            '/core_admin/sessions/',
            '/core_admin/exports/',
            '/core_admin/seo/',
            '/core_admin/cookies/',
        ]
        
        for url in custom_admin_urls:
            try:
                response = client.get(url)
                status = response.status_code
                if status == 200:
                    self.stdout.write(f'‚úÖ {url} - Status: {status}')
                elif status == 302:
                    self.stdout.write(f'‚ö†Ô∏è {url} - Status: {status} (redirect)')
                else:
                    self.stdout.write(f'‚ùå {url} - Status: {status}')
            except Exception as e:
                self.stdout.write(f'‚ùå {url} - Erro: {e}')
        
        # 11. Testar views diretamente
        self.stdout.write('\nüîß Testando Views Diretamente:')
        try:
            from core.admin_views import admin_dashboard, session_list, analyticsexport_list
            
            # Testar dashboard
            request = HttpRequest()
            request.user = user
            response = admin_dashboard(request)
            self.stdout.write(f'Dashboard view - Status: {response.status_code}')
            
            # Testar session list
            response = session_list(request)
            self.stdout.write(f'Session list view - Status: {response.status_code}')
            
            # Testar analytics export list
            response = analyticsexport_list(request)
            self.stdout.write(f'Analytics export view - Status: {response.status_code}')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Erro ao testar views: {e}')
        
        # 12. Verificar templates
        self.stdout.write('\nüìÑ Verificando Templates:')
        from django.template.loader import get_template
        
        templates_to_check = [
            'admin/base.html',
            'admin/base_site.html',
            'admin/dashboard.html',
            'admin/session_list_simple.html',
            'admin/analyticsexport_list_simple.html',
        ]
        
        for template_name in templates_to_check:
            try:
                template = get_template(template_name)
                self.stdout.write(f'‚úÖ {template_name} encontrado')
            except Exception as e:
                self.stdout.write(f'‚ùå {template_name} n√£o encontrado: {e}')
        
        # 13. Verificar configura√ß√µes do admin
        self.stdout.write('\n‚öôÔ∏è Verificando Configura√ß√µes do Admin:')
        from django.contrib import admin
        self.stdout.write(f'Site Header: {admin.site.site_header}')
        self.stdout.write(f'Site Title: {admin.site.site_title}')
        self.stdout.write(f'Index Title: {admin.site.index_title}')
        
        # 14. Verificar vari√°veis de ambiente
        self.stdout.write('\nüåç Verificando Vari√°veis de Ambiente:')
        env_vars = [
            'DATABASE_URL',
            'SECRET_KEY',
            'ENVIRONMENT',
            'DEBUG',
            'ALLOWED_HOSTS',
            'CSRF_TRUSTED_ORIGINS',
        ]
        
        for var in env_vars:
            value = os.getenv(var, 'N√ÉO DEFINIDA')
            if var in ['SECRET_KEY', 'DATABASE_URL']:
                # Mascarar valores sens√≠veis
                if value != 'N√ÉO DEFINIDA':
                    value = value[:10] + '...' if len(value) > 10 else value
            self.stdout.write(f'{var}: {value}')
        
        self.stdout.write('\n‚úÖ Teste de debug de produ√ß√£o conclu√≠do!')
        
        # 15. Resumo de problemas potenciais
        self.stdout.write('\nüìã Resumo de Problemas Potenciais:')
        
        if settings.DEBUG:
            self.stdout.write('‚ö†Ô∏è DEBUG est√° ativado - pode causar problemas em produ√ß√£o')
        
        if 'sqlite' in db_engine and getattr(settings, 'ENVIRONMENT', '') == 'production':
            self.stdout.write('‚ö†Ô∏è Usando SQLite em produ√ß√£o - n√£o recomendado')
        
        if not settings.ALLOWED_HOSTS:
            self.stdout.write('‚ö†Ô∏è ALLOWED_HOSTS est√° vazio')
        
        if not settings.CSRF_TRUSTED_ORIGINS:
            self.stdout.write('‚ö†Ô∏è CSRF_TRUSTED_ORIGINS est√° vazio')
        
        if 'whitenoise' not in str(settings.MIDDLEWARE).lower():
            self.stdout.write('‚ö†Ô∏è WhiteNoise n√£o est√° no middleware')
        
        self.stdout.write('\nüéØ Recomenda√ß√µes:')
        self.stdout.write('1. Verifique se DEBUG=False em produ√ß√£o')
        self.stdout.write('2. Configure ALLOWED_HOSTS corretamente')
        self.stdout.write('3. Configure CSRF_TRUSTED_ORIGINS para HTTPS')
        self.stdout.write('4. Use PostgreSQL em produ√ß√£o')
        self.stdout.write('5. Configure WhiteNoise para arquivos est√°ticos') 