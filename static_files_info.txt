# Configurações de Arquivos Estáticos do Projeto HOZ TECH

## 1. Configurações Principais (settings.py)

### Diretórios e URLs
- STATIC_URL = '/static/'
- STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
- STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

### WhiteNoise (Servidor de Arquivos Estáticos)
- STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
- WHITENOISE_AUTOREFRESH = True
- WHITENOISE_USE_FINDERS = True

### MIME Types Configurados
- .css: text/css
- .js: application/javascript
- .json: application/json
- .html: text/html
- .txt: text/plain
- .png: image/png
- .jpg: image/jpeg
- .jpeg: image/jpeg
- .gif: image/gif
- .ico: image/x-icon
- .svg: image/svg+xml
- .woff: font/woff
- .woff2: font/woff2
- .ttf: font/ttf
- .eot: application/vnd.ms-fontobject
- .otf: font/otf
- .webp: image/webp

### Finders de Arquivos Estáticos
- django.contrib.staticfiles.finders.FileSystemFinder
- django.contrib.staticfiles.finders.AppDirectoriesFinder

## 2. URLs (urls.py)
Em desenvolvimento (DEBUG = True):
- Arquivos estáticos servidos em: /static/
- Arquivos de mídia servidos em: /media/

## 3. Headers de Segurança
- SECURE_CONTENT_TYPE_NOSNIFF = True
- X_FRAME_OPTIONS = 'DENY'

Em produção (DEBUG = False):
- SECURE_SSL_REDIRECT = True
- SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
- SESSION_COOKIE_SECURE = True
- CSRF_COOKIE_SECURE = True
- SECURE_HSTS_SECONDS = 31536000
- SECURE_HSTS_INCLUDE_SUBDOMAINS = True
- SECURE_HSTS_PRELOAD = True

## 4. Estrutura de Diretórios Atual
```
project_root/
├── static/
│   ├── css/
│   │   ├── base.css (3.7KB)
│   │   ├── images.css (1.7KB)
│   │   ├── variables.css (2.4KB)
│   │   ├── output.css (11KB)
│   │   └── cookie_manager.css (4.5KB)
│   ├── js/
│   │   ├── cookie_manager.js (7.2KB)
│   │   └── contact_form.js (8.0KB)
│   └── images/
│       ├── favicon.ico (384B)
│       ├── logo.png (253KB)
│       └── logo_original.png (1.7MB)
├── staticfiles/     # Arquivos coletados pelo collectstatic
└── media/          # Arquivos enviados pelos usuários
```

## 5. Comandos Importantes
```bash
# Coletar arquivos estáticos
python manage.py collectstatic

# Limpar diretório de arquivos estáticos
python manage.py collectstatic --clear

# Coletar arquivos sem interação
python manage.py collectstatic --noinput
```

## 6. Configuração do WhiteNoise no WSGI
```python
from whitenoise import WhiteNoise

application = get_wsgi_application()
application = WhiteNoise(
    application,
    root=os.path.join(os.path.dirname(os.path.dirname(__file__)), 'staticfiles'),
    prefix='static/',
    max_age=31536000
)
```

## 7. Middleware
Ordem dos middlewares relacionados a arquivos estáticos:
1. SecurityMiddleware
2. WhiteNoiseMiddleware
3. CommonMiddleware

## 8. Cache e Compressão
- Compressão automática de arquivos estáticos
- Cache de longa duração para arquivos estáticos em produção
- Cache-Control headers configurados automaticamente

## 9. Desenvolvimento vs. Produção

### Desenvolvimento
- DEBUG = True
- WHITENOISE_AUTOREFRESH = True
- Arquivos servidos diretamente do diretório static/
- Sem necessidade de collectstatic a cada mudança

### Produção
- DEBUG = False
- WHITENOISE_AUTOREFRESH = False
- Arquivos servidos do diretório staticfiles/
- Necessário executar collectstatic após mudanças
- Compressão e cache otimizados

## 10. Boas Práticas
1. Sempre use {% static %} nos templates
2. Mantenha arquivos estáticos organizados por tipo
3. Use nomes de arquivos únicos para evitar conflitos
4. Implemente versionamento de arquivos estáticos
5. Configure corretamente os MIME types
6. Otimize imagens e outros recursos antes do deploy
7. Use CDN em produção quando possível

## 11. Troubleshooting
1. Verifique se STATIC_ROOT está configurado corretamente
2. Execute collectstatic antes do deploy
3. Verifique permissões dos diretórios
4. Confirme a ordem correta dos middlewares
5. Verifique configurações do servidor web
6. Monitore logs para erros 404 em arquivos estáticos

## 12. Arquivos Estáticos Atuais

### CSS
1. base.css (3.7KB)
   - Estilos base do site
   - Reset e normalização
   - Layout principal e grid
   - Navbar e footer
   - Utilitários e animações
   - Classes de texto e background
   - Responsividade
   - Componentes:
     * Navbar com efeitos de hover
     * Footer com gradiente
     * Grid background com efeito tech
     * Animações de glow
     * Media queries para mobile

2. images.css (1.7KB)
   - Estilos específicos para imagens
   - Otimizações de performance
   - Efeitos de hover
   - Fallbacks cross-browser
   - Suporte a filtros modernos
   - Componentes:
     * Logos (site, hero, footer)
     * Efeitos de sombra e glow
     * Transformações 3D
     * Otimizações de renderização

3. variables.css (2.4KB)
   - Sistema de design tokens
   - Paleta de cores tech
   - Gradientes e sombras
   - Tipografia responsiva
   - Espaçamentos
   - Variáveis:
     * 15+ cores principais e variações
     * 3 gradientes personalizados
     * 4 tipos de sombra/glow
     * 2 famílias tipográficas
     * 5 níveis de espaçamento
     * 9 tamanhos de fonte responsivos
     * 3 line-heights
     * 4 letter-spacings

4. output.css (11KB)
   - CSS compilado e minificado
   - Inclui todos os estilos
   - Otimizado para produção
   - Ordem:
     1. Normalização
     2. Variáveis
     3. Base
     4. Componentes
     5. Utilitários

5. cookie_manager.css (4.5KB)
   - Sistema completo de gerenciamento de cookies
   - Modal de preferências
   - Banner de consentimento
   - Animações e transições
   - Componentes:
     * Banner de cookies
     * Modal de preferências
     * Switches de toggle
     * Botões personalizados
     * Categorias de cookies
     * Responsividade
     * Suporte a impressão

### JavaScript
1. cookie_manager.js (7.2KB)
   - Sistema completo de gerenciamento de cookies
   - Conformidade com GDPR/LGPD
   - Versão 2.0.0
   - Funcionalidades:
     * Gerenciamento de consentimento
     * Preferências por categoria
     * Banner de cookies
     * Modal de configurações
     * Suporte a múltiplos idiomas
   - Categorias de Cookies:
     * Necessários (obrigatórios)
     * Análise (opcional)
     * Marketing (opcional)
   - Recursos:
     * Armazenamento seguro de preferências
     * Expiração configurável
     * Suporte a módulos ES6
     * Integração com Google Analytics
     * Limpeza automática de cookies
   - Segurança:
     * Cookies com SameSite=Strict
     * Flags de segurança
     * Proteção contra XSS
     * Validação de dados

2. contact_form.js (8.0KB)
   - Sistema de formulário de contato
   - Validação em tempo real
   - Envio assíncrono (AJAX)
   - Funcionalidades:
     * Validação de campos
     * Máscaras de entrada
     * Feedback visual
     * Mensagens de erro/sucesso
     * Loading states
   - Validações:
     * Nome (min 3 chars, apenas letras)
     * Email (formato válido)
     * Telefone (formato brasileiro)
     * Assunto (max 20 chars)
     * Mensagem (max 5000 chars)
   - Recursos:
     * Proteção contra spam (honeypot)
     * Feedback em tempo real
     * Mensagens personalizadas
     * Suporte a múltiplos idiomas
     * Persistência de dados
   - UX:
     * Indicadores de loading
     * Mensagens de erro claras
     * Feedback visual imediato
     * Foco automático em erros
     * Timeout em mensagens

### Imagens
1. favicon.ico (384B)
   - Ícone do site
   - 16x16 pixels
   - Formato ICO

2. logo.png (253KB)
   - Logo otimizado
   - Versão para web
   - Formato PNG

3. logo_original.png (1.7MB)
   - Logo em alta resolução
   - Arquivo fonte
   - Para uso em materiais impressos 