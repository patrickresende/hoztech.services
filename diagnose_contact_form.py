#!/usr/bin/env python3
"""
Script de diagn√≥stico completo para o formul√°rio de contato
"""

import os
import sys
import django
from pathlib import Path
import requests
from datetime import datetime

# Configurar Django
def setup_django():
    """Configura o ambiente Django"""
    project_root = Path(__file__).resolve().parent
    sys.path.insert(0, str(project_root))
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hoztechsite.settings')
    django.setup()

def test_form_submission():
    """Testa o envio do formul√°rio via HTTP"""
    print("\n" + "="*60)
    print("üåê TESTE DE ENVIO VIA HTTP")
    print("="*60)
    
    from django.test import Client
    from django.urls import reverse
    
    client = Client()
    
    # Dados de teste
    test_data = {
        'name': 'Teste Autom√°tico',
        'email': 'test@example.com',
        'phone': '11999999999',
        'subject': 'Teste de Diagn√≥stico',
        'message': f'Este √© um teste de diagn√≥stico do formul√°rio enviado em: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}',
        'website': ''  # Campo honeypot vazio
    }
    
    try:
        print("üì§ Enviando formul√°rio via POST...")
        print(f"URL: {reverse('core:contact')}")
        print(f"Dados: {test_data}")
        
        response = client.post(reverse('core:contact'), test_data)
        
        print(f"\nüìä Resposta:")
        print(f"Status Code: {response.status_code}")
        print(f"Content Type: {response.get('Content-Type', 'N/A')}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"JSON Response: {data}")
                
                if data.get('success'):
                    print("‚úÖ Formul√°rio enviado com sucesso!")
                else:
                    print(f"‚ùå Erro no formul√°rio: {data.get('message', 'Erro desconhecido')}")
                    if data.get('errors'):
                        print(f"Erros de valida√ß√£o: {data['errors']}")
            except Exception as e:
                print(f"‚ùå Erro ao processar JSON: {e}")
                print(f"Conte√∫do da resposta: {response.content[:500]}")
        else:
            print(f"‚ùå Status code inesperado: {response.status_code}")
            print(f"Conte√∫do da resposta: {response.content[:500]}")
            
    except Exception as e:
        print(f"‚ùå Erro no teste HTTP: {e}")

def test_form_validation():
    """Testa a valida√ß√£o do formul√°rio"""
    print("\n" + "="*60)
    print("‚úÖ TESTE DE VALIDA√á√ÉO DO FORMUL√ÅRIO")
    print("="*60)
    
    from core.forms import ContactForm
    
    # Teste com dados v√°lidos
    valid_data = {
        'name': 'Jo√£o Silva',
        'email': 'joao@example.com',
        'phone': '11999999999',
        'subject': 'Teste V√°lido',
        'message': 'Esta √© uma mensagem de teste v√°lida com mais de 50 caracteres para verificar se a valida√ß√£o est√° funcionando corretamente.',
        'website': ''
    }
    
    print("üìã Testando dados v√°lidos...")
    form = ContactForm(valid_data)
    if form.is_valid():
        print("‚úÖ Dados v√°lidos aceitos")
        print(f"Dados limpos: {form.cleaned_data}")
    else:
        print("‚ùå Dados v√°lidos rejeitados")
        print(f"Erros: {form.errors}")
    
    # Teste com dados inv√°lidos
    invalid_data = {
        'name': 'Jo',  # Muito curto
        'email': 'email-invalido',
        'phone': '123',  # Muito curto
        'subject': '',  # Vazio
        'message': 'Curta',  # Muito curta
        'website': ''
    }
    
    print("\nüìã Testando dados inv√°lidos...")
    form = ContactForm(invalid_data)
    if not form.is_valid():
        print("‚úÖ Dados inv√°lidos rejeitados corretamente")
        print(f"Erros: {form.errors}")
    else:
        print("‚ùå Dados inv√°lidos aceitos incorretamente")

def test_email_handler():
    """Testa o handler de e-mail"""
    print("\n" + "="*60)
    print("üìß TESTE DO HANDLER DE E-MAIL")
    print("="*60)
    
    from core.views import ContactFormHandler
    
    test_data = {
        'name': 'Teste Handler',
        'email': 'test@example.com',
        'phone': '11999999999',
        'subject': 'Teste Handler',
        'message': f'Teste do handler de e-mail em: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
    }
    
    try:
        print("üîß Testando formata√ß√£o de conte√∫do...")
        content = ContactFormHandler.format_email_content(test_data)
        print("‚úÖ Conte√∫do formatado com sucesso")
        print(f"Tamanho do conte√∫do: {len(content)} caracteres")
        
        print("\nüì§ Testando envio de e-mail...")
        ContactFormHandler.send_email(test_data)
        print("‚úÖ E-mail enviado com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro no handler: {e}")

def check_settings():
    """Verifica configura√ß√µes importantes"""
    print("\n" + "="*60)
    print("‚öôÔ∏è VERIFICA√á√ÉO DE CONFIGURA√á√ïES")
    print("="*60)
    
    from django.conf import settings
    
    print("üîß Configura√ß√µes Django:")
    print(f"  DEBUG: {settings.DEBUG}")
    print(f"  ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
    print(f"  CSRF_TRUSTED_ORIGINS: {getattr(settings, 'CSRF_TRUSTED_ORIGINS', 'N√£o definido')}")
    
    print("\nüìß Configura√ß√µes de E-mail:")
    print(f"  EMAIL_BACKEND: {settings.EMAIL_BACKEND}")
    print(f"  EMAIL_HOST: {settings.EMAIL_HOST}")
    print(f"  EMAIL_PORT: {settings.EMAIL_PORT}")
    print(f"  EMAIL_USE_TLS: {settings.EMAIL_USE_TLS}")
    print(f"  EMAIL_USE_SSL: {settings.EMAIL_USE_SSL}")
    print(f"  DEFAULT_FROM_EMAIL: {settings.DEFAULT_FROM_EMAIL}")
    print(f"  CONTACT_EMAIL: {settings.CONTACT_EMAIL}")
    
    print("\nüîí Configura√ß√µes de Seguran√ßa:")
    print(f"  SECURE_SSL_REDIRECT: {getattr(settings, 'SECURE_SSL_REDIRECT', 'N√£o definido')}")
    print(f"  SESSION_COOKIE_SECURE: {getattr(settings, 'SESSION_COOKIE_SECURE', 'N√£o definido')}")
    print(f"  CSRF_COOKIE_SECURE: {getattr(settings, 'CSRF_COOKIE_SECURE', 'N√£o definido')}")

def test_urls():
    """Testa as URLs do projeto"""
    print("\n" + "="*60)
    print("üîó TESTE DE URLs")
    print("="*60)
    
    from django.urls import reverse
    from django.test import Client
    
    client = Client()
    
    urls_to_test = [
        ('core:home', 'GET'),
        ('core:contact', 'GET'),
        ('core:sobre_nos', 'GET'),
        ('core:services', 'GET'),
    ]
    
    for url_name, method in urls_to_test:
        try:
            if method == 'GET':
                response = client.get(reverse(url_name))
            else:
                response = client.post(reverse(url_name))
            
            print(f"  {url_name}: {response.status_code}")
            
            if response.status_code != 200:
                print(f"    ‚ö†Ô∏è Status inesperado: {response.status_code}")
                
        except Exception as e:
            print(f"  {url_name}: ‚ùå Erro - {e}")

def main():
    """Fun√ß√£o principal"""
    print("üîç DIAGN√ìSTICO COMPLETO DO FORMUL√ÅRIO DE CONTATO")
    print("="*60)
    
    # Configurar Django
    try:
        setup_django()
        print("‚úÖ Django configurado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao configurar Django: {e}")
        return
    
    # Executar testes
    check_settings()
    test_urls()
    test_form_validation()
    test_email_handler()
    test_form_submission()
    
    print("\n" + "="*60)
    print("üìä RELAT√ìRIO FINAL")
    print("="*60)
    
    print("üí° Poss√≠veis problemas identificados:")
    print("1. Verificar se o JavaScript est√° carregando corretamente")
    print("2. Verificar se o CSRF token est√° sendo enviado")
    print("3. Verificar se as configura√ß√µes de e-mail est√£o corretas")
    print("4. Verificar se h√° erros no console do navegador")
    print("5. Verificar se o formul√°rio est√° sendo submetido corretamente")
    
    print("\nüîß Pr√≥ximos passos:")
    print("1. Verificar o console do navegador para erros JavaScript")
    print("2. Verificar os logs do servidor")
    print("3. Testar o formul√°rio manualmente no site")
    print("4. Verificar se o e-mail est√° chegando na caixa de entrada")

if __name__ == "__main__":
    main() 