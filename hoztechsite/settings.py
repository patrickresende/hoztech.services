"""
Django settings for hoztechsite project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
import sys
import json
import logging
from datetime import datetime

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv()

# Verificar ambiente
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'  # Corrigindo DEBUB para DEBUG

print(f"Ambiente: {ENVIRONMENT}")
print(f"DEBUG: {DEBUG}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "chave-insegura-para-dev")

# Lista de hosts permitidos
DEFAULT_ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'hoz-tech.onrender.com',
    'hoztech.up.railway.app',
    '.onrender.com',
    '.railway.app'
]

# Processar ALLOWED_HOSTS corretamente
raw_hosts = os.getenv("ALLOWED_HOSTS", ",".join(DEFAULT_ALLOWED_HOSTS))
ALLOWED_HOSTS = [host.strip().split(':')[0] for host in raw_hosts.split(',')]
print("ALLOWED_HOSTS:", ALLOWED_HOSTS)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',  # Aplicação principal
    'whitenoise.runserver_nostatic',
    'django_bootstrap5',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_cleanup.apps.CleanupConfig',
]

# Middleware base - Sem SecurityMiddleware em desenvolvimento
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Adicionando SecurityMiddleware primeiro
    'whitenoise.middleware.WhiteNoiseMiddleware',     # WhiteNoise logo após
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuração do WhiteNoise
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True
WHITENOISE_ENABLE_GZIP = True
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = []  # Comprimir todos os tipos de arquivo
WHITENOISE_INDEX_FILE = True
WHITENOISE_MIMETYPES = {
    '.js': 'application/javascript',
    '.mjs': 'application/javascript',
    '.css': 'text/css',
    '.json': 'application/json',
    '.html': 'text/html',
    '.txt': 'text/plain',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf',
    '.eot': 'application/vnd.ms-fontobject',
}

# Configurações adicionais do WhiteNoise
WHITENOISE_ROOT = os.path.join(BASE_DIR, 'staticfiles')
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_MAX_AGE = 31536000  # 1 ano em segundos
WHITENOISE_USE_FINDERS = True
WHITENOISE_KEEP_ONLY_HASHED_FILES = True

# Headers de segurança e cache
def whitenoise_headers(headers, path, url):
    """Função para configurar headers do WhiteNoise"""
    ext = os.path.splitext(path)[1]
    content_type = WHITENOISE_MIMETYPES.get(ext, 'application/octet-stream')
    
    # Configuração base de cache
    headers['Cache-Control'] = 'public, max-age=31536000'
    headers['X-Content-Type-Options'] = 'nosniff'
    headers['Content-Type'] = content_type
    
    # Headers específicos por tipo de arquivo
    if ext in ['.js', '.css', '.html', '.txt', '.json']:
        headers['Vary'] = 'Accept-Encoding'
        headers['X-Content-Type-Options'] = 'nosniff'
    elif ext in ['.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico']:
        headers['Cache-Control'] = 'public, max-age=31536000, immutable'
    elif ext in ['.woff', '.woff2', '.ttf', '.eot']:
        headers['Cache-Control'] = 'public, max-age=31536000, immutable'
        headers['Access-Control-Allow-Origin'] = '*'
    
    return headers

WHITENOISE_ADD_HEADERS_FUNCTION = whitenoise_headers

# Configurações de Segurança
if ENVIRONMENT == 'development' or DEBUG:
    # Configurações de Desenvolvimento
    SECURE_SSL_REDIRECT = False
    SECURE_BROWSER_XSS_FILTER = False
    SECURE_CONTENT_TYPE_NOSNIFF = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_PROXY_SSL_HEADER = None
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:8000',
        'http://127.0.0.1:8000',
    ]
else:
    # Configurações de Produção
    SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'True').lower() == 'true'
    SECURE_BROWSER_XSS_FILTER = os.getenv('SECURE_BROWSER_XSS_FILTER', 'True').lower() == 'true'
    SECURE_CONTENT_TYPE_NOSNIFF = os.getenv('SECURE_CONTENT_TYPE_NOSNIFF', 'True').lower() == 'true'
    SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'True').lower() == 'true'
    CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'True').lower() == 'true'
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'True').lower() == 'true'
    SECURE_HSTS_PRELOAD = os.getenv('SECURE_HSTS_PRELOAD', 'True').lower() == 'true'
    
    # Processar CSRF_TRUSTED_ORIGINS corretamente
    raw_origins = os.getenv('CSRF_TRUSTED_ORIGINS', 'https://*.onrender.com,https://*.railway.app')
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in raw_origins.split(',')]

# Configuração de CORS
CORS_ALLOW_ALL_ORIGINS = DEBUG
CORS_ALLOW_CREDENTIALS = True

# Configuração do servidor
USE_X_FORWARDED_HOST = False
USE_X_FORWARDED_PORT = False

ROOT_URLCONF = 'hoztechsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'core/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hoztechsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if os.getenv("DATABASE_URL"):
    DATABASES = {
        'default': dj_database_url.parse(
            os.getenv("DATABASE_URL"),
            conn_max_age=600,
            ssl_require=not DEBUG
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutes
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'core/static'),
]

# Configuração do Storage e WhiteNoise
if ENVIRONMENT == 'development':
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
else:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    WHITENOISE_USE_FINDERS = False  # Desativa finders em produção
    WHITENOISE_KEEP_ONLY_HASHED_FILES = True  # Mantém apenas arquivos com hash

# Debug info para arquivos estáticos
print("=== Configuração de Arquivos Estáticos ===")
print(f"BASE_DIR: {BASE_DIR}")
print(f"STATIC_URL: {STATIC_URL}")
print(f"STATIC_ROOT: {STATIC_ROOT}")
print(f"STATICFILES_DIRS: {STATICFILES_DIRS}")
print(f"STATICFILES_STORAGE: {STATICFILES_STORAGE}")
print(f"WHITENOISE_USE_FINDERS: {WHITENOISE_USE_FINDERS}")
print("========================================")

# Media files
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', os.path.join(BASE_DIR, 'mediafiles'))

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Site Configuration
SITE_NAME = os.getenv('SITE_NAME', 'HOZ TECH')
CONTACT_EMAIL = os.getenv('CONTACT_EMAIL', 'contato@hoztech.com')

# Email Configuration
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@hoztech.com')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', DEFAULT_FROM_EMAIL)

# Email timeout settings
EMAIL_TIMEOUT = 30  # seconds
EMAIL_SSL_KEYFILE = None
EMAIL_SSL_CERTFILE = None

# Site settings
ADMIN_URL = os.getenv('ADMIN_URL', 'admin/')

# Configurações do Admin
ADMIN_SITE_HEADER = os.getenv('ADMIN_SITE_HEADER', 'HOZ TECH - Painel Administrativo')
ADMIN_SITE_TITLE = os.getenv('ADMIN_SITE_TITLE', 'HOZ TECH Admin')
ADMIN_INDEX_TITLE = os.getenv('ADMIN_INDEX_TITLE', 'Bem-vindo ao Painel Administrativo')

# Logging Configuration
class RailwayJSONFormatter(logging.Formatter):
    def format(self, record):
        # Mapear níveis de log do Python para severidade do Railway
        severity_map = {
            'DEBUG': 'debug',
            'INFO': 'info',
            'WARNING': 'warning',
            'ERROR': 'error',
            'CRITICAL': 'critical'
        }
        
        # Criar o objeto de log no formato do Railway
        log_entry = {
            "severity": severity_map.get(record.levelname, 'info'),
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "message": record.getMessage(),
            "tags": {
                "deploymentId": os.getenv('RAILWAY_DEPLOYMENT_ID', ''),
                "deploymentInstanceId": os.getenv('RAILWAY_INSTANCE_ID', ''),
                "environmentId": os.getenv('RAILWAY_ENVIRONMENT_ID', ''),
                "projectId": os.getenv('RAILWAY_PROJECT_ID', ''),
                "serviceId": os.getenv('RAILWAY_SERVICE_ID', '')
            },
            "attributes": {
                "level": severity_map.get(record.levelname, 'info')
            }
        }
        
        return json.dumps(log_entry)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'railway_json': {
            '()': RailwayJSONFormatter,
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'railway_json',
            'stream': sys.stdout,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'core': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}
